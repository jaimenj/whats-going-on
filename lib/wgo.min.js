"use strict";let wgoAjaxUrl;function wgoLoadDatatables(){jQuery("#wgo-datatable tfoot th").each((function(){jQuery(this).text();jQuery(this).html('<input type="text" placeholder="Filter.." />')})),tsm_datatables=jQuery("#wgo-datatable").DataTable({dom:'<"float-left"i><"float-right"f>t<"float-left"l>B<"float-right"p><"clearfix">',responsive:!0,order:[[0,"desc"]],buttons:["csv","excel","pdf"],initComplete:function(){this.api().columns().every((function(){let e=this;jQuery("input",this.footer()).on("keyup change",(function(){e.search()!==this.value&&e.search(this.value).draw()}))}))},processing:!0,serverSide:!0,ajax:{url:wgoAjaxUrl+"?action=wgo_main_server_processing",type:"POST"},columnDefs:[{name:"time",targets:0},{name:"url",targets:1},{name:"remote_ip",targets:2},{name:"remote_port",targets:3},{name:"country_code",targets:4},{name:"user_agent",targets:5},{name:"method",targets:6},{name:"last_minute",targets:7},{name:"last_hour",targets:8}]}),console.log("Datatable loaded!")}function doAjaxPopup(e){let t=new XMLHttpRequest;t.onreadystatechange=function(e){4===t.readyState&&(document.getElementById("wgo-popup-info-content").innerHTML=t.responseText)},t.open("POST",wgoAjaxUrl),t.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8"),t.send("action="+e),document.getElementById("wgo-popup-info").style.visibility="initial"}window.addEventListener("load",()=>{"undefined"!=typeof weAreInWhatsGoingOn&&(wgoAjaxUrl=document.getElementById("wgo_form").dataset.wgo_ajax_url,paintMainChart(),paintCountriesAndContinents(),wgoLoadDatatables())});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndnby5qcyJdLCJuYW1lcyI6WyJ3Z29BamF4VXJsIiwid2dvTG9hZERhdGF0YWJsZXMiLCJqUXVlcnkiLCJlYWNoIiwidGhpcyIsInRleHQiLCJodG1sIiwidHNtX2RhdGF0YWJsZXMiLCJEYXRhVGFibGUiLCJkb20iLCJyZXNwb25zaXZlIiwib3JkZXIiLCJidXR0b25zIiwiaW5pdENvbXBsZXRlIiwiYXBpIiwiY29sdW1ucyIsImV2ZXJ5IiwidGhhdCIsImZvb3RlciIsIm9uIiwic2VhcmNoIiwidmFsdWUiLCJkcmF3IiwicHJvY2Vzc2luZyIsInNlcnZlclNpZGUiLCJhamF4IiwidXJsIiwidHlwZSIsImNvbHVtbkRlZnMiLCJuYW1lIiwidGFyZ2V0cyIsImNvbnNvbGUiLCJsb2ciLCJkb0FqYXhQb3B1cCIsImFjdGlvbiIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2UiLCJyZWFkeVN0YXRlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsInJlc3BvbnNlVGV4dCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInN0eWxlIiwidmlzaWJpbGl0eSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3ZUFyZUluV2hhdHNHb2luZ09uIiwiZGF0YXNldCIsIndnb19hamF4X3VybCIsInBhaW50TWFpbkNoYXJ0IiwicGFpbnRDb3VudHJpZXNBbmRDb250aW5lbnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxhQUVBLElBQUlBLFdBRUosU0FBU0Msb0JBQ0xDLE9BQU8sMkJBQTJCQyxNQUFNLFdBQ3hCRCxPQUFPRSxNQUFNQyxPQUV6QkgsT0FBT0UsTUFBTUUsS0FBTSxtREFHdkJDLGVBQWlCTCxPQUFPLGtCQUFrQk0sVUFBVSxDQUNoREMsSUFBSywrRUFDTEMsWUFBWSxFQUNaQyxNQUFPLENBQUMsQ0FBQyxFQUFHLFNBQ1pDLFFBQVMsQ0FBQyxNQUFPLFFBQVMsT0FDMUJDLGFBQWMsV0FDVlQsS0FBS1UsTUFBTUMsVUFBVUMsT0FBTSxXQUN2QixJQUFJQyxFQUFPYixLQUVYRixPQUFPLFFBQVNFLEtBQUtjLFVBQVVDLEdBQUcsZ0JBQWdCLFdBQzFDRixFQUFLRyxXQUFhaEIsS0FBS2lCLE9BQ3ZCSixFQUNLRyxPQUFPaEIsS0FBS2lCLE9BQ1pDLGNBS3JCQyxZQUFZLEVBQ1pDLFlBQVksRUFDWkMsS0FBTSxDQUNGQyxJQUFLMUIsV0FBYSxxQ0FDbEIyQixLQUFNLFFBRVZDLFdBQVksQ0FDUixDQUFFQyxLQUFRLE9BQVFDLFFBQVcsR0FDN0IsQ0FBRUQsS0FBUSxNQUFPQyxRQUFXLEdBQzVCLENBQUVELEtBQVEsWUFBYUMsUUFBVyxHQUNsQyxDQUFFRCxLQUFRLGNBQWVDLFFBQVcsR0FDcEMsQ0FBRUQsS0FBUSxlQUFnQkMsUUFBVyxHQUNyQyxDQUFFRCxLQUFRLGFBQWNDLFFBQVcsR0FDbkMsQ0FBRUQsS0FBUSxTQUFVQyxRQUFXLEdBQy9CLENBQUVELEtBQVEsY0FBZUMsUUFBVyxHQUNwQyxDQUFFRCxLQUFRLFlBQWFDLFFBQVcsTUFJMUNDLFFBQVFDLElBQUkscUJBR2hCLFNBQVNDLFlBQVlDLEdBQ2pCLElBQUlDLEVBQU0sSUFBSUMsZUFFZEQsRUFBSUUsbUJBQXFCLFNBQVVDLEdBQ1IsSUFBbkJILEVBQUlJLGFBQ0pDLFNBQVNDLGVBQWUsMEJBQTBCQyxVQUFZUCxFQUFJUSxlQUkxRVIsRUFBSVMsS0FBSyxPQUFRNUMsWUFDakJtQyxFQUFJVSxpQkFBaUIsZUFBZ0Isb0RBQ3JDVixFQUFJVyxLQUFLLFVBQVlaLEdBRXJCTSxTQUFTQyxlQUFlLGtCQUFrQk0sTUFBTUMsV0FBYSxVQUlqRUMsT0FBT0MsaUJBQWlCLE9BQVEsS0FDTyxvQkFBeEJDLHNCQUNQbkQsV0FBYXdDLFNBQVNDLGVBQWUsWUFBWVcsUUFBUUMsYUFFekRDLGlCQUNBQyw4QkFDQXREIiwiZmlsZSI6Indnby5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IHdnb0FqYXhVcmxcblxuZnVuY3Rpb24gd2dvTG9hZERhdGF0YWJsZXMoKSB7XG4gICAgalF1ZXJ5KCcjd2dvLWRhdGF0YWJsZSB0Zm9vdCB0aCcpLmVhY2goIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHRpdGxlID0galF1ZXJ5KHRoaXMpLnRleHQoKVxuXG4gICAgICAgIGpRdWVyeSh0aGlzKS5odG1sKCAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJGaWx0ZXIuLlwiIC8+JyApXG4gICAgfSlcblxuICAgIHRzbV9kYXRhdGFibGVzID0galF1ZXJ5KCcjd2dvLWRhdGF0YWJsZScpLkRhdGFUYWJsZSh7XG4gICAgICAgIGRvbTogJzxcImZsb2F0LWxlZnRcImk+PFwiZmxvYXQtcmlnaHRcImY+dDxcImZsb2F0LWxlZnRcImw+QjxcImZsb2F0LXJpZ2h0XCJwPjxcImNsZWFyZml4XCI+JyxcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgb3JkZXI6IFtbMCwgXCJkZXNjXCJdXSxcbiAgICAgICAgYnV0dG9uczogWydjc3YnLCAnZXhjZWwnLCAncGRmJ10sXG4gICAgICAgIGluaXRDb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5hcGkoKS5jb2x1bW5zKCkuZXZlcnkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpc1xuXG4gICAgICAgICAgICAgICAgalF1ZXJ5KCdpbnB1dCcsIHRoaXMuZm9vdGVyKCkpLm9uKCdrZXl1cCBjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LnNlYXJjaCgpICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlYXJjaCh0aGlzLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kcmF3KClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzaW5nOiB0cnVlLFxuICAgICAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgICAgICBhamF4OiB7XG4gICAgICAgICAgICB1cmw6IHdnb0FqYXhVcmwgKyAnP2FjdGlvbj13Z29fbWFpbl9zZXJ2ZXJfcHJvY2Vzc2luZycsXG4gICAgICAgICAgICB0eXBlOiAnUE9TVCdcbiAgICAgICAgfSxcbiAgICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICAgICAgeyAnbmFtZSc6ICd0aW1lJywgJ3RhcmdldHMnOiAwIH0sXG4gICAgICAgICAgICB7ICduYW1lJzogJ3VybCcsICd0YXJnZXRzJzogMSB9LFxuICAgICAgICAgICAgeyAnbmFtZSc6ICdyZW1vdGVfaXAnLCAndGFyZ2V0cyc6IDIgfSxcbiAgICAgICAgICAgIHsgJ25hbWUnOiAncmVtb3RlX3BvcnQnLCAndGFyZ2V0cyc6IDMgfSxcbiAgICAgICAgICAgIHsgJ25hbWUnOiAnY291bnRyeV9jb2RlJywgJ3RhcmdldHMnOiA0IH0sXG4gICAgICAgICAgICB7ICduYW1lJzogJ3VzZXJfYWdlbnQnLCAndGFyZ2V0cyc6IDUgfSxcbiAgICAgICAgICAgIHsgJ25hbWUnOiAnbWV0aG9kJywgJ3RhcmdldHMnOiA2IH0sXG4gICAgICAgICAgICB7ICduYW1lJzogJ2xhc3RfbWludXRlJywgJ3RhcmdldHMnOiA3IH0sXG4gICAgICAgICAgICB7ICduYW1lJzogJ2xhc3RfaG91cicsICd0YXJnZXRzJzogOCB9XG4gICAgICAgIF1cbiAgICB9KVxuXG4gICAgY29uc29sZS5sb2coJ0RhdGF0YWJsZSBsb2FkZWQhJylcbn1cblxuZnVuY3Rpb24gZG9BamF4UG9wdXAoYWN0aW9uKSB7XG4gICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3Z28tcG9wdXAtaW5mby1jb250ZW50JykuaW5uZXJIVE1MID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB4aHIub3BlbignUE9TVCcsIHdnb0FqYXhVcmwpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04Jyk7XG4gICAgeGhyLnNlbmQoJ2FjdGlvbj0nICsgYWN0aW9uKTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3Z28tcG9wdXAtaW5mbycpLnN0eWxlLnZpc2liaWxpdHkgPSAnaW5pdGlhbCc7XG59XG5cbi8vIFN0YXJ0cyBhbGwgSlMuLlxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB3ZUFyZUluV2hhdHNHb2luZ09uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3Z29BamF4VXJsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dnb19mb3JtJykuZGF0YXNldC53Z29fYWpheF91cmw7XG5cbiAgICAgICAgcGFpbnRNYWluQ2hhcnQoKVxuICAgICAgICBwYWludENvdW50cmllc0FuZENvbnRpbmVudHMoKVxuICAgICAgICB3Z29Mb2FkRGF0YXRhYmxlcygpXG4gICAgfVxufSlcbiJdfQ==
